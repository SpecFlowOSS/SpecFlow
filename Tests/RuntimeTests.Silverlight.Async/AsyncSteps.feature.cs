// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace RuntimeTests.Silverlight.Async
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AsynchronousStepsFeature : Microsoft.Silverlight.Testing.SilverlightTest, TechTalk.SpecFlow.IAsyncFeature, TechTalk.SpecFlow.AsyncContextProvider.ISilverlightTestInstance
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(typeof(AsynchronousStepsFeature));
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Asynchronous steps", "In order to test asynchronous processes\nAs a developer\nI want to be able to run s" +
                    "teps in an asynchronous manner", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            AsyncContext.Register(new TechTalk.SpecFlow.AsyncContextProvider.SilverlightTestAsyncContext(this));
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Running an async process and waiting for it to complete using EnqueueConditional")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Asynchronous steps")]
        [Microsoft.Silverlight.Testing.AsynchronousAttribute()]
        public virtual void RunningAnAsyncProcessAndWaitingForItToCompleteUsingEnqueueConditional()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Running an async process and waiting for it to complete using EnqueueConditional", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.When("I initiate an asynchronous process");
            testRunner.And("it has not yet completed");
            testRunner.And("I wait for it");
            testRunner.Then("it has completed");
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Running an async process and waiting for it to complete using EnqueueDelay")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Asynchronous steps")]
        [Microsoft.Silverlight.Testing.AsynchronousAttribute()]
        public virtual void RunningAnAsyncProcessAndWaitingForItToCompleteUsingEnqueueDelay()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Running an async process and waiting for it to complete using EnqueueDelay", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.When("I initiate an asynchronous process");
            testRunner.And("it has not yet completed");
            testRunner.And("I sleep for 3 seconds");
            testRunner.Then("it has completed");
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Using EnqueueDelay before executing the step using EnqueueCallback")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Asynchronous steps")]
        [Microsoft.Silverlight.Testing.AsynchronousAttribute()]
        public virtual void UsingEnqueueDelayBeforeExecutingTheStepUsingEnqueueCallback()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Using EnqueueDelay before executing the step using EnqueueCallback", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.When("I sleep before doing executing an action");
            testRunner.Then("the action did not start until after the delay");
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Steps called from step definitions are executed in the correct order")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Asynchronous steps")]
        [Microsoft.Silverlight.Testing.AsynchronousAttribute()]
        public virtual void StepsCalledFromStepDefinitionsAreExecutedInTheCorrectOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Steps called from step definitions are executed in the correct order", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.When("I call a step and pass value \'1\'");
            testRunner.And("I call a step and pass value \'2\'");
            testRunner.And("I call the step again 5 times from the step definition, passing in an increasing " +
                    "value starting with \'3\'");
            testRunner.And("I call a step and pass value \'8\'");
            testRunner.And("I call the step again 4 times from the step definition, passing in an increasing " +
                    "value starting with \'9\'");
            testRunner.Then("the values passed to the steps should all be in order");
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Nested steps are enqueued to run asynchronously")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Asynchronous steps")]
        [Microsoft.Silverlight.Testing.AsynchronousAttribute()]
        public virtual void NestedStepsAreEnqueuedToRunAsynchronously()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Nested steps are enqueued to run asynchronously", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.When("I call a step from a step definition it is not exectued until after this step");
            testRunner.But("it is executed before this step");
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
