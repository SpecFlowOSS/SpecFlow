using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using Moq;
using NUnit.Framework;
using TechTalk.SpecFlow.Generator;
using TechTalk.SpecFlow.Generator.Configuration;
using Should;
using TechTalk.SpecFlow.Generator.Interfaces;
using TechTalk.SpecFlow.Utils;

namespace GeneratorTests
{
    [TestFixture]
    public class TestGeneratorBasicsTests : TestGeneratorTestsBase
    {
        private string GenerateTestFromSimpleFeature(ProjectSettings projectSettings)
        {
            var testGenerator = CreateTestGenerator(projectSettings);

            var result = testGenerator.GenerateTestFile(CreateSimpleValidFeatureFileInput(), defaultSettings);
            result.Success.ShouldBeTrue();
            return result.GeneratedTestCode;
        }

        [Test]
        public void Should_generate_a_net35_csharp_test_from_simple_feature()
        {
            string outputFile = GenerateTestFromSimpleFeature(net35CSProjectSettings);
            outputFile.ShouldNotBeEmpty();
        }

        [Test]
        public void Should_generate_a_net35_vb_test_from_simple_feature()
        {
            string outputFile = GenerateTestFromSimpleFeature(net35VBProjectSettings);
            outputFile.ShouldNotBeEmpty();
        }

        [Test]
        public void Should_include_header_in_generated_file()
        {
            string outputFile = GenerateTestFromSimpleFeature(net35CSProjectSettings);
            outputFile.ShouldContain("This code was generated by SpecFlow");
        }

        [Test]
        public void Should_wrap_generated_test_with_designer_region()
        {
            string outputFile = GenerateTestFromSimpleFeature(net35CSProjectSettings);
            outputFile.ShouldContain("#region Designer generated code");
            outputFile.ShouldContain("#endregion");
        }

        [Test]
        public void Should_include_generator_version_in_the_header()
        {
            string outputFile = GenerateTestFromSimpleFeature(net35CSProjectSettings);
            outputFile.ShouldContain(string.Format("SpecFlow Generator Version:{0}", TestGeneratorFactory.GeneratorVersion));
        }

        [Test]
        public void Should_generate_test_from_feature_file_specified_by_path()
        {
            using (var tempFile = new TempFile(".sfeature"))
            {
                tempFile.SetContent(CreateSimpleValidFeatureFileInput().FeatureFileContent);

                ProjectSettings projectSettings = new ProjectSettings { ProjectFolder = tempFile.FolderName, ProjectPlatformSettings = net35CSSettings };
                var testGenerator = CreateTestGenerator(projectSettings);

                var result = testGenerator.GenerateTestFile(
                    new FeatureFileInput(tempFile.FileName),
                    defaultSettings);
                result.Success.ShouldBeTrue();
            }
        }

        [Test]
        public void Should_return_detected_version()
        {
            Version version = new Version();
            TestHeaderWriterStub.Setup(thw => thw.DetectGeneratedTestVersion("any")).Returns(version);

            var testGenerator = CreateTestGenerator();
            FeatureFileInput featureFileInput = CreateSimpleValidFeatureFileInput();
            featureFileInput.GeneratedTestFileContent = "any";
            var result = testGenerator.DetectGeneratedTestVersion(featureFileInput);

            result.ShouldNotBeNull();
            result.ShouldEqual(version);
        }

        [Test]
        public void Should_return_detected_version_from_file()
        {
            Version version = new Version();
            TestHeaderWriterStub.Setup(thw => thw.DetectGeneratedTestVersion("any")).Returns(version);

            using (var tempFile = new TempFile(".cs"))
            {
                tempFile.SetContent("any");

                ProjectSettings projectSettings = new ProjectSettings { ProjectFolder = tempFile.FolderName, ProjectPlatformSettings = net35CSSettings };
                var testGenerator = CreateTestGenerator(projectSettings);
                FeatureFileInput featureFileInput = CreateSimpleValidFeatureFileInput();
                featureFileInput.GeneratedTestProjectRelativePath = tempFile.FileName;
                var result = testGenerator.DetectGeneratedTestVersion(featureFileInput);

                result.ShouldNotBeNull();
                result.ShouldEqual(version);
            }
        }

        [Test]
        public void Should_return_unknown_version_when_there_is_an_error()
        {
            TestHeaderWriterStub.Setup(thw => thw.DetectGeneratedTestVersion("any")).Throws(new Exception());

            var testGenerator = CreateTestGenerator();
            FeatureFileInput featureFileInput = CreateSimpleValidFeatureFileInput();
            featureFileInput.GeneratedTestFileContent = "any";
            var result = testGenerator.DetectGeneratedTestVersion(featureFileInput);

            result.ShouldBeNull();
        }

        [Test]
        public void Should_detect_up_to_date_test_file_based_on_preliminary_up_to_date_check()
        {
            var testGenerator = CreateTestGenerator(net35CSProjectSettings);

            TestUpToDateCheckerStub.Setup(tu2d => tu2d.IsUpToDatePreliminary(It.IsAny<FeatureFileInput>(), It.IsAny<string>(), It.IsAny<UpToDateCheckingMethod>()))
                .Returns(true);

            var result = testGenerator.GenerateTestFile(CreateSimpleValidFeatureFileInput(), new GenerationSettings
                                                                                                 {
                                                                                                     CheckUpToDate = true
                                                                                                 });
            result.IsUpToDate.ShouldBeTrue();
        }

        [Test]
        public void Should_detect_outdated_test_file_based_on_preliminary_up_to_date_check()
        {
            var testGenerator = CreateTestGenerator(net35CSProjectSettings);

            TestUpToDateCheckerStub.Setup(tu2d => tu2d.IsUpToDatePreliminary(It.IsAny<FeatureFileInput>(), It.IsAny<string>(), It.IsAny<UpToDateCheckingMethod>()))
                .Returns(false);

            var result = testGenerator.GenerateTestFile(CreateSimpleValidFeatureFileInput(), new GenerationSettings
                                                                                                 {
                                                                                                     CheckUpToDate = true
                                                                                                 });
            result.IsUpToDate.ShouldBeFalse();
        }

        [Test]
        public void Should_detect_up_to_date_test_file_based_on_context_based_up_to_date_check()
        {
            var testGenerator = CreateTestGenerator(net35CSProjectSettings);

            TestUpToDateCheckerStub.Setup(tu2d => tu2d.IsUpToDatePreliminary(It.IsAny<FeatureFileInput>(), It.IsAny<string>(), It.IsAny<UpToDateCheckingMethod>()))
                .Returns((bool?)null);

            TestUpToDateCheckerStub.Setup(tu2d => tu2d.IsUpToDate(It.IsAny<FeatureFileInput>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<UpToDateCheckingMethod>()))
                .Returns(true);

            var result = testGenerator.GenerateTestFile(CreateSimpleValidFeatureFileInput(), new GenerationSettings
            {
                CheckUpToDate = true
            });
            result.IsUpToDate.ShouldBeTrue();
            result.GeneratedTestCode.ShouldBeNull();
        }

        [Test]
        public void Should_detect_outdated_test_file_based_on_context_based_up_to_date_check()
        {
            var testGenerator = CreateTestGenerator(net35CSProjectSettings);

            TestUpToDateCheckerStub.Setup(tu2d => tu2d.IsUpToDatePreliminary(It.IsAny<FeatureFileInput>(), It.IsAny<string>(), It.IsAny<UpToDateCheckingMethod>()))
                .Returns((bool?)null);

            TestUpToDateCheckerStub.Setup(tu2d => tu2d.IsUpToDate(It.IsAny<FeatureFileInput>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<UpToDateCheckingMethod>()))
                .Returns(false);

            var result = testGenerator.GenerateTestFile(CreateSimpleValidFeatureFileInput(), new GenerationSettings
            {
                CheckUpToDate = true
            });
            result.IsUpToDate.ShouldBeFalse();
        }
    }
}
