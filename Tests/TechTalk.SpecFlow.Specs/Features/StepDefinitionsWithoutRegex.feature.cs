// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.0.0.0
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TechTalk.SpecFlow.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Step definitions can be matched based on the method name (without Regex)")]
    [NUnit.Framework.IgnoreAttribute()]
    public partial class StepDefinitionsCanBeMatchedBasedOnTheMethodNameWithoutRegexFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "StepDefinitionsWithoutRegex.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Step definitions can be matched based on the method name (without Regex)", "", ProgrammingLanguage.CSharp, new string[] {
                        "ignore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parameterless steps")]
        public virtual void ParameterlessSteps()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parameterless steps", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 5
 testRunner.Given("a scenario \'Simple Scenario\' as", "When I do something", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.And("the following step definitions", "[When]\r\npublic void When_I_do_something()\r\n{}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("the binding method \'When_I_do_something\' is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void StepsWithParameters(string @case, string parameter, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Steps with parameters", exampleTags);
#line 18
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 19
 testRunner.Given("a scenario \'Simple Scenario\' as", string.Format("When {0} does something", parameter), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
 testRunner.And("the following step definitions", "[When]\r\npublic void When_WHO_does_something(string who)\r\n{\r\n\tif (who != \"Joe\") th" +
                    "row new Exception(\"invalid parameter: \" + who);\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
 testRunner.Then("the binding method \'When_WHO_does_something\' is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Steps with parameters")]
        public virtual void StepsWithParameters_Simple()
        {
            this.StepsWithParameters("simple", "Joe", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Steps with parameters")]
        public virtual void StepsWithParameters_Quoted()
        {
            this.StepsWithParameters("quoted", "\"Joe\"", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Steps with parameters")]
        public virtual void StepsWithParameters_Apostrophed()
        {
            this.StepsWithParameters("apostrophed", "\'Joe\'", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Steps with parameters referred by index")]
        public virtual void StepsWithParametersReferredByIndex()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Steps with parameters referred by index", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 41
 testRunner.Given("a scenario \'Simple Scenario\' as", "When Joe does something with:", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 45
 testRunner.And("the following step definitions", "[When]\r\npublic void When_P0_does_P1_with(string who, string what)\r\n{\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.Then("the binding method \'When_P0_does_P1_with\' is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Steps with multiple parameters and punctuation")]
        public virtual void StepsWithMultipleParametersAndPunctuation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Steps with multiple parameters and punctuation", ((string[])(null)));
#line 56
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 57
 testRunner.Given("a scenario \'Simple Scenario\' as", "When Joe does - something with:\r\n| table |", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 62
 testRunner.And("the following step definitions", "[When]\r\npublic void When_WHO_does_WHAT_with(string who, string what, Table table)" +
                    "\r\n{\r\n\tif (what != \"something\") throw new Exception(\"invalid parameter: \" + what)" +
                    ";\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 71
 testRunner.Then("the binding method \'When_WHO_does_WHAT_with\' is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Keyword prefix can be omitted")]
        public virtual void KeywordPrefixCanBeOmitted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Keyword prefix can be omitted", ((string[])(null)));
#line 74
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 75
 testRunner.Given("a scenario \'Simple Scenario\' as", "When I do something", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 79
 testRunner.And("the following step definitions", "[When] public void I_do_something()\r\n{}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
 testRunner.Then("the binding method \'I_do_something\' is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void SupportsAllAttributes(string attribute, string step, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Supports all attributes", exampleTags);
#line 88
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 89
 testRunner.Given("a scenario \'Simple Scenario\' as", string.Format("{0} I do something", step), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 93
 testRunner.And("the following step definitions", string.Format("[{0}] public void I_do_something()\r\n{{}}", attribute), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
 testRunner.Then("the binding method \'I_do_something\' is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Supports all attributes")]
        public virtual void SupportsAllAttributes_Given()
        {
            this.SupportsAllAttributes("Given", "Given", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Supports all attributes")]
        public virtual void SupportsAllAttributes_When()
        {
            this.SupportsAllAttributes("When", "When", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Supports all attributes")]
        public virtual void SupportsAllAttributes_Then()
        {
            this.SupportsAllAttributes("Then", "Then", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Supports all attributes")]
        public virtual void SupportsAllAttributes_StepDefinition()
        {
            this.SupportsAllAttributes("StepDefinition", "Given", ((string[])(null)));
        }
        
        public virtual void PascalCaseMethods(string @case, string method, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pascal case methods", exampleTags);
#line 108
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 109
 testRunner.Given("a scenario \'Simple Scenario\' as", "When I do something really important", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 113
 testRunner.And("the following step definitions", string.Format("[When]\r\npublic void {0}(string howMuch)\r\n{{}}", method), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 119
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 120
 testRunner.Then(string.Format("the binding method \'{0}\' is executed", method), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pascal case methods")]
        public virtual void PascalCaseMethods_EmbeddedParam()
        {
            this.PascalCaseMethods("embedded param", "WhenIDoSomethingHOWMUCHImportant", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pascal case methods")]
        public virtual void PascalCaseMethods_ParamWithUnderscore()
        {
            this.PascalCaseMethods("param with underscore", "WhenIDoSomething_HOWMUCH_Important", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pascal case methods")]
        public virtual void PascalCaseMethods_MixedUnderscores()
        {
            this.PascalCaseMethods("mixed underscores", "WhenI_Do_SomethingHOWMUCHImportant", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Underscore in parameter name")]
        public virtual void UnderscoreInParameterName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Underscore in parameter name", ((string[])(null)));
#line 128
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 129
 testRunner.Given("a scenario \'Simple Scenario\' as", "When Joe does something", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 133
 testRunner.And("the following step definitions", "[When]\r\npublic void When_W_H_O_does_something(string w_h_o)\r\n{\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 141
 testRunner.Then("the binding method \'When_W_H_O_does_something\' is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void FMethodNameCanBeUsedAsARegex(string @case, string method, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "fsharp"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("F# method name can be used as a regex", @__tags);
#line 144
this.ScenarioSetup(scenarioInfo);
#line 145
 testRunner.Given("there is an external F# class library project \'ExternalSteps_FSharp\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 146
 testRunner.And("the following step definition in the external library", string.Format("let [<When>] {0} = ()", method), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.And("there is a SpecFlow project with a reference to the external library", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 151
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something really important", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 155
 testRunner.And("the specflow configuration is", "<specFlow>\r\n<stepAssemblies>\r\n<stepAssembly assembly=\"ExternalSteps_FSharp\" />\r\n<" +
                    "/stepAssemblies>\r\n</specFlow>", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 164
 testRunner.Then("all tests should pass", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("F# method name can be used as a regex")]
        [NUnit.Framework.CategoryAttribute("fsharp")]
        public virtual void FMethodNameCanBeUsedAsARegex_Simple()
        {
            this.FMethodNameCanBeUsedAsARegex("simple", "``I do something really important``()", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("F# method name can be used as a regex")]
        [NUnit.Framework.CategoryAttribute("fsharp")]
        public virtual void FMethodNameCanBeUsedAsARegex_BasicRegexOps()
        {
            this.FMethodNameCanBeUsedAsARegex("basic regex ops", "``I do something .* important``()", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("F# method name can be used as a regex")]
        [NUnit.Framework.CategoryAttribute("fsharp")]
        public virtual void FMethodNameCanBeUsedAsARegex_Parameter()
        {
            this.FMethodNameCanBeUsedAsARegex("parameter", "``I do something (.*) important``(howMuch: string)", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("F# method name can be used as a regex")]
        [NUnit.Framework.CategoryAttribute("fsharp")]
        public virtual void FMethodNameCanBeUsedAsARegex_Non_RegexMethodName()
        {
            this.FMethodNameCanBeUsedAsARegex("non-regex method name", "When_I_do_something_really_important()", ((string[])(null)));
        }
        
        public virtual void Non_EnglishKeywords(string @case, string keyword, string methodPrefix, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Non-English keywords", exampleTags);
#line 173
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 176
 testRunner.Given("there is a feature file in the project as", string.Format("\tFunktionalität: German\r\n\tSzenario: Zwei Zahlen hinzufügen\r\n\t\t{0} ich Knopf drück" +
                        "e", keyword), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 182
 testRunner.And("the following step definitions", string.Format("[Given]\r\npublic void {0}ich_Knopf_drücke()\r\n{{}}", methodPrefix), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 188
 testRunner.And("the specflow configuration is", "<specFlow>\r\n<!-- the localized prefixes are detected if the \r\nfeature language or" +
                    " the binding culture is set in the config -->\r\n<language feature=\"de-DE\" /> \r\n<!" +
                    "--<bindingCulture name=\"de-DE\" />-->\r\n</specFlow>", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 197
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 198
 testRunner.Then(string.Format("the binding method \'{0}ich_Knopf_drücke\' is executed", methodPrefix), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Non-English keywords")]
        public virtual void Non_EnglishKeywords_NoPrefix()
        {
            this.Non_EnglishKeywords("No prefix", "Angenommen", "", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Non-English keywords")]
        public virtual void Non_EnglishKeywords_EnglishPrefix()
        {
            this.Non_EnglishKeywords("English prefix", "Angenommen", "Given_", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Non-English keywords")]
        public virtual void Non_EnglishKeywords_SingleWordLicalizedPrefix()
        {
            this.Non_EnglishKeywords("Single word licalized prefix", "Angenommen", "Angenommen_", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Non-English keywords")]
        public virtual void Non_EnglishKeywords_MultipleWordLicalizedPrefix()
        {
            this.Non_EnglishKeywords("Multiple word licalized prefix", "Gegeben sei", "Gegeben_sei_", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Non-English keywords")]
        public virtual void Non_EnglishKeywords_MixedKeywordVariants()
        {
            this.Non_EnglishKeywords("Mixed keyword variants", "Gegeben sei", "Angenommen_", ((string[])(null)));
        }
    }
}
#pragma warning restore
#endregion
