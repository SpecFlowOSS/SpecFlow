// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.7.1.0
//      SpecFlow Generator Version:1.7.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace TechTalk.SpecFlow.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Injecting context into step specifications")]
    public partial class InjectingContextIntoStepSpecificationsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ContextInjection.sfeature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Injecting context into step specifications", "As a developer\r\nI would like to have the system automatically inject an instance " +
                    "of any class as defined in the constructor of a step file\r\nSo that I don\'t have " +
                    "to rely on the global shared state and can define the contexts required for each" +
                    " scenario.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
#line 7
 testRunner.Given("the following binding class", @"public class SingleContext
{
public static int InstanceCount = 0;
public string ScenarioTitle;

public SingleContext()
{
ScenarioTitle = ScenarioContext.Current.ScenarioInfo.Title;
InstanceCount++;
}
}
public class OtherSingleContext
{
}
public class NestedContext
{
public readonly SingleContext SingleContext;

public NestedContext(SingleContext singleContext)
{
if (singleContext == null) throw new ArgumentNullException(""singleContext"");
this.SingleContext = singleContext;
}
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 34
 testRunner.And("the following step definition", @"[Then(@""the instance count of SingleContext should be (\d+)"")]
public void ThenTheInstanceCountShouldBe(int expectedCount)
{
if (SingleContext.InstanceCount != expectedCount) throw new Exception(""Instance count should be "" + expectedCount + "" but was "" + SingleContext.InstanceCount);
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Binding class can depend on a single context")]
        public virtual void BindingClassCanDependOnASingleContext()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Binding class can depend on a single context", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 44
 testRunner.Given("the following binding class", @"[Binding]
public class StepsWithSingleContext
{
private readonly SingleContext singleContext;

public StepsWithSingleContext(SingleContext singleContext)
{
if (singleContext == null) throw new ArgumentNullException(""singleContext"");
this.singleContext = singleContext;
}

[When(@""I do something"")]
public void WhenIDoSomething()
{
}
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 63
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something\r\nThen the instance count of SingleContext should be 1", ((TechTalk.SpecFlow.Table)(null)));
#line 68
 testRunner.When("I execute the tests");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table1.AddRow(new string[] {
                        "1"});
#line 69
 testRunner.Then("the execution summary should contain", ((string)(null)), table1);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Binding class can depend on multiple contexts")]
        public virtual void BindingClassCanDependOnMultipleContexts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Binding class can depend on multiple contexts", ((string[])(null)));
#line 73
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 74
 testRunner.Given("the following binding class", @"[Binding]
public class StepsWithMultipleContexts
{
public StepsWithMultipleContexts(SingleContext singleContext, OtherSingleContext otherContext)
{
if (singleContext == null) throw new ArgumentNullException(""singleContext"");
if (otherContext == null) throw new ArgumentNullException(""otherContext"");
}

[When(@""I do something"")]
public void WhenIDoSomething()
{
}
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 91
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something\r\nThen the instance count of SingleContext should be 1", ((TechTalk.SpecFlow.Table)(null)));
#line 96
 testRunner.When("I execute the tests");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table2.AddRow(new string[] {
                        "1"});
#line 97
 testRunner.Then("the execution summary should contain", ((string)(null)), table2);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Context classes can depend on other context classes recursively")]
        public virtual void ContextClassesCanDependOnOtherContextClassesRecursively()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Context classes can depend on other context classes recursively", ((string[])(null)));
#line 101
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 102
 testRunner.Given("the following binding class", @"[Binding]
public class StepsWithNestedContext
{
public StepsWithNestedContext(NestedContext nestedContext, SingleContext singleContext)
{
if (nestedContext == null) throw new ArgumentNullException(""nestedContext"");
if (singleContext == null) throw new ArgumentNullException(""singleContext"");
}

[When(@""I do something"")]
public void WhenIDoSomething()
{
}
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 119
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something\r\nThen the instance count of SingleContext should be 1", ((TechTalk.SpecFlow.Table)(null)));
#line 124
 testRunner.When("I execute the tests");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table3.AddRow(new string[] {
                        "1"});
#line 125
 testRunner.Then("the execution summary should contain", ((string)(null)), table3);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Context classes are shared across binding classes")]
        public virtual void ContextClassesAreSharedAcrossBindingClasses()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Context classes are shared across binding classes", ((string[])(null)));
#line 129
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 130
 testRunner.Given("the following binding class", @"[Binding]
public class StepsWithSingleContext
{
public StepsWithSingleContext(SingleContext singleContext)
{
if (singleContext == null) throw new ArgumentNullException(""singleContext"");
}

[When(@""I do something"")]
public void WhenIDoSomething()
{
}
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 146
 testRunner.Given("the following binding class", @"[Binding]
public class OtherStepsWithSingleContext
{
public OtherStepsWithSingleContext(SingleContext singleContext)
{
if (singleContext == null) throw new ArgumentNullException(""singleContext"");
}

[When(@""I do something else"")]
public void WhenIDoSomethingElse()
{
}
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 162
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something\r\nAnd I do something else\r\nThen the instance count of SingleCo" +
                    "ntext should be 1", ((TechTalk.SpecFlow.Table)(null)));
#line 168
 testRunner.When("I execute the tests");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table4.AddRow(new string[] {
                        "1"});
#line 169
 testRunner.Then("the execution summary should contain", ((string)(null)), table4);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Context classes are recreated for every scenario")]
        public virtual void ContextClassesAreRecreatedForEveryScenario()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Context classes are recreated for every scenario", ((string[])(null)));
#line 173
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 174
 testRunner.Given("the following binding class", @"[Binding]
public class StepsWithSingleContext
{
private SingleContext singleContext;

public StepsWithSingleContext(SingleContext singleContext)
{
if (singleContext == null) throw new ArgumentNullException(""singleContext"");
this.singleContext = singleContext;
}

[When(@""I do something"")]
public void WhenIDoSomething()
{
}


[Then(@""the SingleContext instance was created in scenario '(.+)'"")]
public void ThenTheInstanceCountShouldBe(string title)
{
if (singleContext.ScenarioTitle != title) throw new Exception(""Instance count should be created in "" + title + "" but was "" + singleContext.ScenarioTitle);
}
}", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 200
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something\r\nThen the SingleContext instance was created in scenario \'Sim" +
                    "ple Scenario\'", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 205
 testRunner.And("a scenario \'Other Scenario\' as", "When I do something\r\nThen the SingleContext instance was created in scenario \'Oth" +
                    "er Scenario\'", ((TechTalk.SpecFlow.Table)(null)));
#line 210
 testRunner.When("I execute the tests");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table5.AddRow(new string[] {
                        "2"});
#line 211
 testRunner.Then("the execution summary should contain", ((string)(null)), table5);
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#endregion
