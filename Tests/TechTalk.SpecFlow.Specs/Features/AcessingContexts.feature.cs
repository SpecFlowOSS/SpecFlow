// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TechTalk.SpecFlow.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Acessing Contexts")]
    public partial class AcessingContextsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AcessingContexts.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Acessing Contexts", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should be able to inject ScenarioContext")]
        public virtual void ShouldBeAbleToInjectScenarioContext()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should be able to inject ScenarioContext", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 4
 testRunner.Given("the following binding class", @"[Binding]
public class StepsWithScenarioContext
{
public StepsWithScenarioContext(ScenarioContext scenarioContext)
{
if (scenarioContext == null) throw new ArgumentNullException(""scenarioContext"");
}

[When(@""I do something"")]
public void WhenIDoSomething()
{
}
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something         ", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table1.AddRow(new string[] {
                        "1"});
#line 25
 testRunner.Then("the execution summary should contain", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The same ScenarioContext should be inject in the same scenario")]
        public virtual void TheSameScenarioContextShouldBeInjectInTheSameScenario()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The same ScenarioContext should be inject in the same scenario", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 30
 testRunner.Given("the following binding class", @"[Binding]
public class StepsWithScenarioContext
{
private readonly ScenarioContext scenarioContext;

public StepsWithScenarioContext(ScenarioContext scenarioContext)
{
if (scenarioContext == null) throw new ArgumentNullException(""scenarioContext"");
this.scenarioContext = scenarioContext;
}

[Given(@""I put something into the context"")]
public void GivenIPutSomethingIntoTheContext()
{
scenarioContext.Set(""test-value"", ""test-key"");
}
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 50
 testRunner.Given("the following binding class", @"[Binding]
public class AnotherStepsWithScenarioContext
{
private readonly ScenarioContext scenarioContext;

public AnotherStepsWithScenarioContext(ScenarioContext scenarioContext)
{
if (scenarioContext == null) throw new ArgumentNullException(""scenarioContext"");
this.scenarioContext = scenarioContext;
}

[Then(@""something should be found in the context"")]
public void ThenSomethingShouldBeFoundInTheContext()
{
var testValue = scenarioContext.Get<string>(""test-key"");
if (testValue != ""test-value"") throw new Exception(""Test value was not found in the scenarioContext""); 
}
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 71
 testRunner.And("a scenario \'Simple Scenario\' as", "Given I put something into the context         \r\nThen something should be found i" +
                    "n the context", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table2.AddRow(new string[] {
                        "1"});
#line 77
 testRunner.Then("the execution summary should contain", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Different scenarios should have their own ScenarioContext injected")]
        public virtual void DifferentScenariosShouldHaveTheirOwnScenarioContextInjected()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Different scenarios should have their own ScenarioContext injected", ((string[])(null)));
#line 81
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 82
 testRunner.Given("the following binding class", @"[Binding]
public class StepsWithScenarioContext
{
private readonly ScenarioContext scenarioContext;

public StepsWithScenarioContext(ScenarioContext scenarioContext)
{
if (scenarioContext == null) throw new ArgumentNullException(""scenarioContext"");
this.scenarioContext = scenarioContext;
}

[When(@""I do something"")]
public void WhenIDoSomething()
{
string testValue = null;
if (scenarioContext.TryGetValue(""test-key"", out testValue)) throw new Exception(""Test value was found in the scenarioContext""); 
scenarioContext.Set(""test-value"", ""test-key"");
}
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 104
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something         ", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
 testRunner.And("a scenario \'Another Simple Scenario\' as", "When I do something         ", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table3.AddRow(new string[] {
                        "2"});
#line 113
 testRunner.Then("the execution summary should contain", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should be able to inject FeatureContext")]
        public virtual void ShouldBeAbleToInjectFeatureContext()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should be able to inject FeatureContext", ((string[])(null)));
#line 117
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 118
 testRunner.Given("the following binding class", @"[Binding]
public class StepsWithScenarioContext
{
public StepsWithScenarioContext(FeatureContext featureContext)
{
if (featureContext == null) throw new ArgumentNullException(""featureContext"");
}

[When(@""I do something"")]
public void WhenIDoSomething()
{
}
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 134
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something         ", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 138
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table4.AddRow(new string[] {
                        "1"});
#line 139
 testRunner.Then("the execution summary should contain", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The same FeatureContext should be inject in the scenarios of the same feature")]
        public virtual void TheSameFeatureContextShouldBeInjectInTheScenariosOfTheSameFeature()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The same FeatureContext should be inject in the scenarios of the same feature", ((string[])(null)));
#line 143
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 144
 testRunner.Given("the following binding class", @"[Binding]
public class StepsWithFeatureContext
{
private readonly FeatureContext featureContext;

public StepsWithFeatureContext(FeatureContext featureContext)
{
if (featureContext == null) throw new ArgumentNullException(""featureContext"");
this.featureContext = featureContext;
}

[Given(@""I put something into the context"")]
public void GivenIPutSomethingIntoTheContext()
{
featureContext.Set(""test-value"", ""test-key"");
}
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 164
 testRunner.Given("the following binding class", @"[Binding]
public class AnotherStepsWithFeatureContext
{
private readonly FeatureContext featureContext;

public AnotherStepsWithFeatureContext(FeatureContext featureContext)
{
if (featureContext == null) throw new ArgumentNullException(""featureContext"");
this.featureContext = featureContext;
}

[Then(@""something should be found in the context"")]
public void ThenSomethingShouldBeFoundInTheContext()
{
var testValue = featureContext.Get<string>(""test-key"");
if (testValue != ""test-value"") throw new Exception(""Test value was not found in the scenarioContext""); 
}
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 185
 testRunner.And("there is a feature file in the project as", "Feature: Feature1\r\n\r\nScenario: Scenario1\r\nGiven I put something into the context " +
                    " \r\n\r\nScenario: Scenario2\r\nThen something should be found in the context", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 195
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table5.AddRow(new string[] {
                        "2"});
#line 196
 testRunner.Then("the execution summary should contain", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ScenarioContext can be accessed from Steps base class")]
        public virtual void ScenarioContextCanBeAccessedFromStepsBaseClass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ScenarioContext can be accessed from Steps base class", ((string[])(null)));
#line 200
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 201
 testRunner.Given("the following binding class", "[Binding]\r\npublic class StepsWithScenarioContext : Steps\r\n{\r\n[Given(@\"I put somet" +
                    "hing into the context\")]\r\npublic void GivenIPutSomethingIntoTheContext()\r\n{\r\nSce" +
                    "narioContext.Set(\"test-value\", \"test-key\");\r\n}\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 213
 testRunner.Given("the following binding class", @"[Binding]
public class AnotherStepsWithScenarioContext : Steps
{
[Then(@""something should be found in the context"")]
public void ThenSomethingShouldBeFoundInTheContext()
{
var testValue = ScenarioContext.Get<string>(""test-key"");
if (testValue != ""test-value"") throw new Exception(""Test value was not found in the scenarioContext""); 
}
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 226
 testRunner.And("a scenario \'Simple Scenario\' as", "Given I put something into the context         \r\nThen something should be found i" +
                    "n the context", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 231
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table6.AddRow(new string[] {
                        "1"});
#line 232
 testRunner.Then("the execution summary should contain", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("FeatureContext can be accessed from Steps base class")]
        public virtual void FeatureContextCanBeAccessedFromStepsBaseClass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FeatureContext can be accessed from Steps base class", ((string[])(null)));
#line 236
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 237
 testRunner.Given("the following binding class", "[Binding]\r\npublic class StepsWithFeatureContext : Steps\r\n{\r\n[Given(@\"I put someth" +
                    "ing into the context\")]\r\npublic void GivenIPutSomethingIntoTheContext()\r\n{\r\nFeat" +
                    "ureContext.Set(\"test-value\", \"test-key\");\r\n}\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 249
 testRunner.Given("the following binding class", @"[Binding]
public class AnotherStepsWithFeatureContext : Steps
{
[Then(@""something should be found in the context"")]
public void ThenSomethingShouldBeFoundInTheContext()
{
var testValue = FeatureContext.Get<string>(""test-key"");
if (testValue != ""test-value"") throw new Exception(""Test value was not found in the scenarioContext""); 
}
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 262
 testRunner.And("there is a feature file in the project as", "Feature: Feature1\r\n\r\nScenario: Scenario1\r\nGiven I put something into the context " +
                    " \r\n\r\nScenario: Scenario2\r\nThen something should be found in the context", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 272
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table7.AddRow(new string[] {
                        "2"});
#line 273
 testRunner.Then("the execution summary should contain", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("StepContext can be accessed from Steps base class")]
        public virtual void StepContextCanBeAccessedFromStepsBaseClass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("StepContext can be accessed from Steps base class", ((string[])(null)));
#line 277
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 278
 testRunner.Given("the following binding class", "[Binding]\r\npublic class MySteps : Steps\r\n{\r\n[When(@\"I do something\")]\r\npublic voi" +
                    "d GivenIPutSomethingIntoTheContext()\r\n{\r\n        if (StepContext.StepInfo.Text !" +
                    "= \"I do something\") \r\n            throw new Exception(\"Invalid StepContext\"); \r\n" +
                    "}\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 291
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 295
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table8.AddRow(new string[] {
                        "1"});
#line 296
 testRunner.Then("the execution summary should contain", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("StepContext can be accessed from the ScenarioContext")]
        public virtual void StepContextCanBeAccessedFromTheScenarioContext()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("StepContext can be accessed from the ScenarioContext", ((string[])(null)));
#line 300
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 301
 testRunner.Given("the following binding class", @"[Binding]
public class StepsWithScenarioContext
{
private readonly ScenarioContext scenarioContext;

public StepsWithScenarioContext(ScenarioContext scenarioContext)
{
if (scenarioContext == null) throw new ArgumentNullException(""scenarioContext"");
this.scenarioContext = scenarioContext;
}

[When(@""I do something"")]
public void GivenIPutSomethingIntoTheContext()
{
        if (scenarioContext.StepContext.StepInfo.Text != ""I do something"") 
            throw new Exception(""Invalid StepContext""); 
}
}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 322
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 326
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Succeeded"});
            table9.AddRow(new string[] {
                        "1"});
#line 327
 testRunner.Then("the execution summary should contain", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
