// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TechTalk.SpecFlow.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Step Argument Transformations")]
    public partial class StepArgumentTransformationsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "StepArgumentTransformations.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Step Argument Transformations", "In order to reduce the amount of code and repetitive tasks in my steps\r\nAs a prog" +
                    "rammer\r\nI want to define reusable transformations for my step arguments", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should be able to convert steps arguments to arbritrary class instances")]
        public virtual void ShouldBeAbleToConvertStepsArgumentsToArbritraryClassInstances()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should be able to convert steps arguments to arbritrary class instances", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 7
 testRunner.Given("the following class", "public class User\r\n{\r\npublic string Name { get; set; }\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
 testRunner.And("the following step argument transformation", "[StepArgumentTransformation]\r\npublic User ConvertUser(string name)\r\n{\r\nreturn new" +
                    " User {Name = name};\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.And("the following step definition", "[When(@\"(.*) books a flight\")]\r\npublic void WhenSomebodyBooksAFlight(User user)\r\n" +
                    "{}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And("a scenario \'Simple Scenario\' as", "When Bob books a flight", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then("the binding method \'WhenSomebodyBooksAFlight\' is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should be able to convert step arguments to simple .NET types")]
        public virtual void ShouldBeAbleToConvertStepArgumentsToSimple_NETTypes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should be able to convert step arguments to simple .NET types", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 36
 testRunner.Given("the following step argument transformation", "[StepArgumentTransformation(@\"in (\\d+) days\")]\r\npublic DateTime ConvertInDays(int" +
                    " days)\r\n{\r\nreturn DateTime.Today.AddDays(days);\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 44
 testRunner.And("the following step definition", "[Given(@\"I have an appointment (.*)\")]\r\npublic void GivenIHaveAnAppointmentAt(Dat" +
                    "eTime time)\r\n{}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
 testRunner.And("a scenario \'Simple Scenario\' as", "Given I have an appointment in 2 days", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
 testRunner.Then("the binding method \'GivenIHaveAnAppointmentAt\' is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multi-line text arguments can be converted")]
        public virtual void Multi_LineTextArgumentsCanBeConverted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multi-line text arguments can be converted", ((string[])(null)));
#line 57
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 58
 testRunner.Given("the following step argument transformation", "[StepArgumentTransformation]\r\npublic XmlDocument TransformXml(string xml)\r\n{\r\n   " +
                    " XmlDocument result = new XmlDocument();\r\n    result.LoadXml(xml);\r\n    return r" +
                    "esult;\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 68
 testRunner.And("the following step definition", "[Given(@\"the following XML file\")]\r\npublic void GivenTheFollowingXMLFile(XmlDocum" +
                    "ent xmlDocument)\r\n{}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.And("a scenario \'Simple Scenario\' as", "Given the following XML file\r\n\'\'\'\r\n<Root>\r\n<Child attr=\"value\" />\r\n</Root>\r\n\'\'\'", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 84
 testRunner.Then("the binding method \'GivenTheFollowingXMLFile\' is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multi argument step transformation can be converted")]
        public virtual void MultiArgumentStepTransformationCanBeConverted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multi argument step transformation can be converted", ((string[])(null)));
#line 86
 this.ScenarioSetup(scenarioInfo);
#line hidden
#line 87
 testRunner.Given("the following step argument transformation", "[StepArgumentTransformation]\r\npublic XmlDocument TransformToTimeRange(DateTime st" +
                    "art, DateTime end)\r\n{\r\n     XmlDocument result = new XmlDocument();\r\nreturn resu" +
                    "lt;\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 96
 testRunner.And("the following step definition", "[Given(\"I have a time range from (.*) to (.*)\")]\r\npublic void GivenIHaveATimeRang" +
                    "e(XmlDocument timeRange)\r\n{\r\n} ", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
 testRunner.And("a scenario \'Simple Scenario\' as", "Given I have a time range from 10-Dec-2015 to 11-Dec-2015", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
 testRunner.Then("the binding method \'GivenIHaveATimeRange\' is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multi argument step transformation which are part of a multiple argument step can" +
            " be converted")]
        public virtual void MultiArgumentStepTransformationWhichArePartOfAMultipleArgumentStepCanBeConverted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multi argument step transformation which are part of a multiple argument step can" +
                    " be converted", ((string[])(null)));
#line 110
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 111
 testRunner.Given("the following step argument transformation", "[StepArgumentTransformation]\r\npublic XmlDocument TransformToXmlDocument(DateTime " +
                    "start, DateTime end)\r\n{\r\n     XmlDocument result = new XmlDocument();\r\nreturn re" +
                    "sult;\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 120
 testRunner.And("the following step argument transformation", "[StepArgumentTransformation]\r\npublic List<object> TransformToCollectionOfObjects(" +
                    "string name, string age)\r\n{\r\n     List<object> result = new  List<object>();\r\nre" +
                    "turn result;\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 129
 testRunner.And("the following step definition", "[Given(\"I have a time range from (.*) to (.*) which contains the child \'(.*)\' age" +
                    "d (.*) birthday.\")]\r\npublic void GivenIHaveATimeRangeAndAChild(XmlDocument timeR" +
                    "ange, List<object> child)\r\n{\r\n} ", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 136
 testRunner.And("a scenario \'Simple Scenario\' as", "Given I have a time range from 10-Dec-2011 to 11-Dec-2011 which contains the chil" +
                    "d \'Tom\' aged 5 birthday.", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 140
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 141
 testRunner.Then("the binding method \'GivenIHaveATimeRangeAndAChild\' is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multi argument step transformation which are part of a multiple argument step whi" +
            "ch includes tables can be converted")]
        public virtual void MultiArgumentStepTransformationWhichArePartOfAMultipleArgumentStepWhichIncludesTablesCanBeConverted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multi argument step transformation which are part of a multiple argument step whi" +
                    "ch includes tables can be converted", ((string[])(null)));
#line 143
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 144
 testRunner.Given("the following step argument transformation", "[StepArgumentTransformation]\r\npublic XmlDocument TransformToXmlDocument(DateTime " +
                    "start, DateTime end)\r\n{\r\n     XmlDocument result = new XmlDocument();\r\nreturn re" +
                    "sult;\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 153
 testRunner.And("the following step argument transformation", "[StepArgumentTransformation]\r\npublic List<object> TransformToCollectionOfObjects(" +
                    "string name, string age)\r\n{\r\n     List<object> result = new  List<object>();\r\nre" +
                    "turn result;\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 162
 testRunner.And("the following step argument transformation", "[StepArgumentTransformation]\r\npublic List<int> TransformToCollectionOfObjects(Tab" +
                    "le table)\r\n{\r\n     List<int> result = new  List<int>();\r\nreturn result;\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 171
 testRunner.And("the following step definition", "[Given(\"I have a time range from (.*) to (.*) which contains the child \'(.*)\' age" +
                    "d (.*) birthday.\")]\r\npublic void GivenIHaveATimeRangeAndAChild(XmlDocument timeR" +
                    "ange, List<object> child, List<int> table)\r\n{\r\n} ", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 178
 testRunner.And("a scenario \'Simple Scenario\' as", "Given I have a time range from 10-Dec-2011 to 11-Dec-2011 which contains the chil" +
                    "d \'Tom\' aged 5 birthday.\r\n| Heading1 | Heading2 |\r\n| val      | val2     |\r\n| va" +
                    "l4     | val3     |", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 185
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 186
 testRunner.Then("the binding method \'GivenIHaveATimeRangeAndAChild\' is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multi argument step transformation which contain regexes which consume multiple a" +
            "rguments can be converted")]
        public virtual void MultiArgumentStepTransformationWhichContainRegexesWhichConsumeMultipleArgumentsCanBeConverted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multi argument step transformation which contain regexes which consume multiple a" +
                    "rguments can be converted", ((string[])(null)));
#line 188
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 189
 testRunner.Given("the following step argument transformation", "[StepArgumentTransformation(@\"(\\d*) hour(?:s)?\")]\r\npublic TimeSpan TransformToXml" +
                    "Document(int hours)\r\n{\r\n     return TimeSpan.FromHours(hours);\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 197
 testRunner.And("the following step argument transformation", "[StepArgumentTransformation]\r\npublic List<object> TransformToCollectionOfObjects(" +
                    "string name, string age)\r\n{\r\n     List<object> result = new  List<object>();\r\nre" +
                    "turn result;\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 206
 testRunner.And("the following step argument transformation", "[StepArgumentTransformation]\r\npublic List<int> TransformToCollectionOfObjects(Tab" +
                    "le table)\r\n{\r\n     List<int> result = new  List<int>();\r\nreturn result;\r\n}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 215
 testRunner.And("the following step definition", "[Given(\"A time of (.*) which contains the child \'(.*)\' aged (.*) birthday.\")]\r\npu" +
                    "blic void GivenIHaveATimeRangeAndAChild(TimeSpan timeRange, List<object> child, " +
                    "List<int> table)\r\n{\r\n} ", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 222
 testRunner.And("a scenario \'Simple Scenario\' as", "Given A time of 8 hours which contains the child \'Tom\' aged 5 birthday.\r\n| Headin" +
                    "g1 | Heading2 |\r\n| val      | val2     |\r\n| val4     | val3     |", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 229
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 230
 testRunner.Then("the binding method \'GivenIHaveATimeRangeAndAChild\' is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
