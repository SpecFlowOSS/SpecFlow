// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.0.0.0
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TechTalk.SpecFlow.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Different step arguments")]
    [NUnit.Framework.IgnoreAttribute()]
    public partial class DifferentStepArgumentsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "StepArguments.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Different step arguments", "", ProgrammingLanguage.CSharp, new string[] {
                        "ignore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Steps can be defined without argument")]
        public virtual void StepsCanBeDefinedWithoutArgument()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Steps can be defined without argument", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 5
 testRunner.Given("the following step definition", "[When(@\"I do something\")]\r\npublic void WhenIDoSomething()\r\n{\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.Then("all tests should pass", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Steps can be defined with table argument")]
        public virtual void StepsCanBeDefinedWithTableArgument()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Steps can be defined with table argument", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 20
 testRunner.Given("the following step definition", "[When(@\"I do something\")]\r\npublic void WhenIDoSomething(Table table)\r\n{\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 27
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something\r\n| foo |\r\n| bar |", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then("all tests should pass", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Steps can be defined with multiline text argument")]
        public virtual void StepsCanBeDefinedWithMultilineTextArgument()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Steps can be defined with multiline text argument", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 38
 testRunner.Given("the following step definition", "[When(@\"I do something\")]\r\npublic void WhenIDoSomething(string text)\r\n{\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 45
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something\r\n\'\'\'\r\n<Root>\r\n<Child attr=\"value\" />\r\n</Root>\r\n\'\'\'", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
 testRunner.Then("all tests should pass", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Steps can be defined with both table and multiline text argument")]
        public virtual void StepsCanBeDefinedWithBothTableAndMultilineTextArgument()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Steps can be defined with both table and multiline text argument", ((string[])(null)));
#line 58
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 59
 testRunner.Given("the following step definition", "[When(@\"I do something\")]\r\npublic void WhenIDoSomething(string text, Table table)" +
                    "\r\n{\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 66
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something\r\n\'\'\'\r\n<Root>\r\n<Child attr=\"value\" />\r\n</Root>\r\n\'\'\'\r\n| foo |\r\n" +
                    "| bar |", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 78
 testRunner.Then("all tests should pass", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Step parameters in the step definitions have to be declared before the multiline " +
            "text and table parameters")]
        public virtual void StepParametersInTheStepDefinitionsHaveToBeDeclaredBeforeTheMultilineTextAndTableParameters()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Step parameters in the step definitions have to be declared before the multiline " +
                    "text and table parameters", ((string[])(null)));
#line 80
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 81
 testRunner.Given("the following step definition", "[When(@\"I (.*) something\")]\r\npublic void WhenIDoSomething(string what, Table tabl" +
                    "e)\r\n{\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 88
 testRunner.And("a scenario \'Simple Scenario\' as", "When I do something\r\n| foo |\r\n| bar |", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.When("I execute the tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 95
 testRunner.Then("all tests should pass", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
