// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TechTalk.SpecFlow.Specs.Features.Reports
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("StepDefinitionReport")]
    public partial class StepDefinitionReportFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "StepDefinitionReport.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "StepDefinitionReport", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("All steps are bound with one step")]
        public virtual void AllStepsAreBoundWithOneStep()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All steps are bound with one step", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line 6
testRunner.Given("there is a SpecFlow project", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
testRunner.And("there is a feature file in the project as", "\tFeature: Simple Feature\r\n\tScenario: Simple Scenario\r\n\t\tGiven there is something\r" +
                    "\n\t\tWhen I do something\r\n\t\tThen something should happen\t\t\t", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
testRunner.And("the following step definitions", "[Given(\"there is something\")]\r\npublic void GivenThereIsSomething()\r\n{}\r\n\r\n[When(\"" +
                    "I do something\")]\r\npublic void WhenIDoSomething()\r\n{}\r\n\r\n[Then(\"something should" +
                    " happen\")]\r\npublic void ThenSomethingShouldHappen()\r\n{}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
testRunner.When("the project is compiled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
testRunner.And("I generate SpecFlow Step Definition report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
testRunner.Then("the generated report contains", @"Givens Step Definition Instances there is something [copy] 1 [show] Instances: there is something [copy] Simple Feature / Simple Scenario 
Whens Step Definition Instances I do something [copy] 1 [show] Instances: I do something [copy] Simple Feature / Simple Scenario 
Thens Step Definition Instances something should happen [copy] 1 [show] Instances: something should happen [copy] Simple Feature / Simple Scenario", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("One step with two bindings")]
        public virtual void OneStepWithTwoBindings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One step with two bindings", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line 42
testRunner.Given("there is a SpecFlow project", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 43
testRunner.And("there is a feature file in the project as", "\tFeature: Simple Feature\r\n\tScenario: Simple Scenario\r\n\t\tGiven there is something\t" +
                    "", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
testRunner.And("the following step definitions", "[Given(\"there is something\")]\r\npublic void GivenThereIsSomething()\r\n{}\r\n\r\n[Given(" +
                    "\"there is something\")]\r\npublic void GivenThereIsSomething_Duplicate()\r\n{}\r\n", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
testRunner.When("the project is compiled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
testRunner.And("I generate SpecFlow Step Definition report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
testRunner.Then("the generated report contains", "Givens Step Definition Instances \r\nthere is something [copy] 1 [show] Instances: " +
                    "\r\nthere is something [copy] Simple Feature / Simple Scenario \r\nthere is somethin" +
                    "g [copy] 0\r\nWhens Step Definition Instances \r\nThens Step Definition Instances", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiple usage of same step")]
        public virtual void MultipleUsageOfSameStep()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple usage of same step", ((string[])(null)));
#line 75
this.ScenarioSetup(scenarioInfo);
#line 77
testRunner.Given("there is a SpecFlow project", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 78
testRunner.And("there is a feature file in the project as", "\tFeature: Simple Feature\r\n\tScenario: Simple Scenario\r\n\t\tGiven there is something\r" +
                    "\n\t\t\r\n\tScenario: Simple Scenario 2\r\n\t\tGiven there is something\t\t", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
testRunner.And("the following step definitions", "[Given(\"there is something\")]\r\npublic void GivenThereIsSomething()\r\n{}", ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
testRunner.When("the project is compiled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 95
testRunner.And("I generate SpecFlow Step Definition report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
testRunner.Then("the generated report contains", "Givens Step Definition Instances \r\nthere is something [copy] 2 [show] Instances: " +
                    "\r\nthere is something [copy] Simple Feature / Simple Scenario Simple Feature / Si" +
                    "mple Scenario 2\r\nWhens Step Definition Instances \r\nThens Step Definition Instanc" +
                    "es", ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
