// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.7.1.0
//      SpecFlow Generator Version:1.7.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace TechTalk.SpecFlow.Specs.Features.Reports
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Generating HTML report from NUnit/MsTest execution result")]
    public partial class GeneratingHTMLReportFromNUnitMsTestExecutionResultFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ExecutionReport.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Generating HTML report from NUnit/MsTest execution result", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("there is a feature \'Feature with successful scenarios\' with 2 passing 0 failing 0" +
                    " pending and 0 ignored scenarios");
#line 5
 testRunner.And("there is a feature \'Feature with failing scenarios\' with 0 passing 1 failing 1 pe" +
                    "nding and 1 ignored scenarios");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Summary is included in the HTML result (NUnit)")]
        public virtual void SummaryIsIncludedInTheHTMLResultNUnit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Summary is included in the HTML result (NUnit)", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("there are NUnit test execution results for the project");
#line 10
 testRunner.When("I generate SpecFlow NUnit execution report");
#line hidden
#line 11
 testRunner.Then("the generated report contains", "\tSummary \n\tFeatures\tSuccess rate\tScenarios\tSuccess\t\tFailed\tPending\t\tIgnored \n\t2 f" +
                    "eatures\t40%\t\t\t\t5\t\t\t2\t\t\t1\t\t1\t\t\t1 ", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Summary is included in the HTML result (MsTest)")]
        [NUnit.Framework.CategoryAttribute("mstest")]
        public virtual void SummaryIsIncludedInTheHTMLResultMsTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Summary is included in the HTML result (MsTest)", new string[] {
                        "mstest"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("there are MsTest test execution results for the project");
#line 21
 testRunner.When("I generate SpecFlow MsTest execution report");
#line hidden
#line 22
 testRunner.Then("the generated report contains", "\tSummary \n\tFeatures\tSuccess rate\tScenarios\tSuccess\t\tFailed\tPending\t\tIgnored \n\t2 f" +
                    "eatures\t50%\t\t\t\t4\t\t\t2\t\t\t1\t\t1\t\t\t0 ", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feature summary is included in the HTML result (NUnit)")]
        public virtual void FeatureSummaryIsIncludedInTheHTMLResultNUnit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feature summary is included in the HTML result (NUnit)", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.Given("there are NUnit test execution results for the project");
#line 31
 testRunner.When("I generate SpecFlow NUnit execution report");
#line hidden
#line 32
 testRunner.Then("the generated report contains", "\tFeature Summary\n\tFeature\t\t\t\t\t\t\t\tSuccess rate\tScenarios\tSuccess\t\tFailed\tPending\t\t" +
                    "Ignored\t\t\n\tFeature with failing scenarios\t\t0%\t\t\t\t3\t\t\t0\t\t\t1\t\t1\t\t\t1\n\tFeature with " +
                    "successful scenarios\t100%\t\t\t2\t\t\t2\t\t\t0\t\t0\t\t\t0", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Feature summary is included in the HTML result (MsTest)")]
        [NUnit.Framework.CategoryAttribute("mstest")]
        public virtual void FeatureSummaryIsIncludedInTheHTMLResultMsTest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Feature summary is included in the HTML result (MsTest)", new string[] {
                        "mstest"});
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("there are MsTest test execution results for the project");
#line 43
 testRunner.When("I generate SpecFlow MsTest execution report");
#line hidden
#line 44
 testRunner.Then("the generated report contains", "\tFeature Summary\n\tFeature\t\t\t\t\t\t\t\tSuccess rate\tScenarios\tSuccess\t\tFailed\tPending\t\t" +
                    "Ignored\t\t\n\tFeature with failing scenarios\t\t0%\t\t\t\t2\t\t\t0\t\t\t1\t\t1\t\t\t0\n\tFeature with " +
                    "successful scenarios\t100%\t\t\t2\t\t\t2\t\t\t0\t\t0\t\t\t0", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void SuccessfulTestOutputIsIncludedInTheHTMLResult(string unittest, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successful test output is included in the HTML result", exampleTags);
#line 52
this.ScenarioSetup(scenarioInfo);
#line 53
 testRunner.Given(string.Format("there are {0} test execution results for the project", unittest));
#line 54
 testRunner.When(string.Format("I generate SpecFlow {0} execution report", unittest));
#line hidden
#line 55
 testRunner.Then("the generated report contains", "\tWhen the step pass in Feature with successful scenarios\n\t-> done: ", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Successful test output is included in the HTML result")]
        public virtual void SuccessfulTestOutputIsIncludedInTheHTMLResult_NUnit()
        {
            this.SuccessfulTestOutputIsIncludedInTheHTMLResult("NUnit", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Successful test output is included in the HTML result")]
        [NUnit.Framework.CategoryAttribute("mstest")]
        public virtual void SuccessfulTestOutputIsIncludedInTheHTMLResult_MsTest_MsTest()
        {
            this.SuccessfulTestOutputIsIncludedInTheHTMLResult("MsTest", new string[] {
                        "mstest"});
        }
        
        public virtual void PendingTestOutputIsIncludedInTheHTMLResult(string unittest, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pending test output is included in the HTML result", exampleTags);
#line 68
this.ScenarioSetup(scenarioInfo);
#line 69
 testRunner.Given(string.Format("there are {0} test execution results for the project", unittest));
#line 70
 testRunner.When(string.Format("I generate SpecFlow {0} execution report", unittest));
#line hidden
#line 71
 testRunner.Then("the generated report contains", "\tWhen the step is pending\n\t-> No matching step definition found for the step. Use" +
                    " the following code to create one:", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 76
 testRunner.And("the generated report contains", "\t [When(@\"the step is pending\")]\n        public void WhenTheStepIsPending()\n     " +
                    "   {\n            ScenarioContext.Current.Pending();\n        }", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pending test output is included in the HTML result")]
        public virtual void PendingTestOutputIsIncludedInTheHTMLResult_NUnit()
        {
            this.PendingTestOutputIsIncludedInTheHTMLResult("NUnit", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pending test output is included in the HTML result")]
        [NUnit.Framework.CategoryAttribute("mstest")]
        [NUnit.Framework.IgnoreAttribute()]
        public virtual void PendingTestOutputIsIncludedInTheHTMLResult_MsTest_MsTest()
        {
            this.PendingTestOutputIsIncludedInTheHTMLResult("MsTest", new string[] {
                        "mstest",
                        "ignore"});
        }
        
        public virtual void FailingTestOutputIsIncludedInTheHTMLResult(string unittest, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Failing test output is included in the HTML result", exampleTags);
#line 93
this.ScenarioSetup(scenarioInfo);
#line 94
 testRunner.Given(string.Format("there are {0} test execution results for the project", unittest));
#line 95
 testRunner.When(string.Format("I generate SpecFlow {0} execution report", unittest));
#line hidden
#line 96
 testRunner.Then("the generated report contains", "\tWhen the step fail in Feature with failing scenarios\n\t-> error:", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 101
 testRunner.And("the generated report contains", "\tsimulated failure", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Failing test output is included in the HTML result")]
        public virtual void FailingTestOutputIsIncludedInTheHTMLResult_NUnit()
        {
            this.FailingTestOutputIsIncludedInTheHTMLResult("NUnit", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Failing test output is included in the HTML result")]
        [NUnit.Framework.CategoryAttribute("mstest")]
        public virtual void FailingTestOutputIsIncludedInTheHTMLResult_MsTest_MsTest()
        {
            this.FailingTestOutputIsIncludedInTheHTMLResult("MsTest", new string[] {
                        "mstest"});
        }
        
        public virtual void FailingTestExceptionIsIncludedInTheHTMLResult(string unittest, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Failing test exception is included in the HTML result", exampleTags);
#line 113
this.ScenarioSetup(scenarioInfo);
#line 114
 testRunner.Given(string.Format("there are {0} test execution results for the project", unittest));
#line 115
 testRunner.When(string.Format("I generate SpecFlow {0} execution report", unittest));
#line hidden
#line 116
 testRunner.Then("the generated report contains", "\tsystem.exception", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
#line 120
 testRunner.And("the generated report contains", "\tsimulated failure", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Failing test exception is included in the HTML result")]
        public virtual void FailingTestExceptionIsIncludedInTheHTMLResult_NUnit()
        {
            this.FailingTestExceptionIsIncludedInTheHTMLResult("NUnit", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Failing test exception is included in the HTML result")]
        [NUnit.Framework.CategoryAttribute("mstest")]
        public virtual void FailingTestExceptionIsIncludedInTheHTMLResult_MsTest_MsTest()
        {
            this.FailingTestExceptionIsIncludedInTheHTMLResult("MsTest", new string[] {
                        "mstest"});
        }
    }
}
#endregion
