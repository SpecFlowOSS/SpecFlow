// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.0.0.0
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TechTalk.SpecFlow.Specs.Features.Parser
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Handling errors of Gherkin files")]
    [NUnit.Framework.CategoryAttribute("parser")]
    public partial class HandlingErrorsOfGherkinFilesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "HandlingParserErrors.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Handling errors of Gherkin files", "In order to find out easily what is wrong with a Gherkin file\r\nAs a SpecFlow user" +
                    "\r\nI want to get error messages for all possible errors", ProgrammingLanguage.CSharp, new string[] {
                        "parser"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Capturing syntax error")]
        public virtual void CapturingSyntaxError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Capturing syntax error", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 8
 testRunner.Given("there is a Gherkin file as", "\tFeature: Syntax error\r\n\r\n\tScenario: misspelled step keyword\r\n\t\tGiven something\r\n" +
                    "\t\tWhenX something is misspelled", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.When("the file is parsed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "line",
                        "error"});
            table1.AddRow(new string[] {
                        "5",
                        "Parsing error near \'WhenX"});
#line 17
 testRunner.Then("the following errors are provided", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Capturing semantic error")]
        public virtual void CapturingSemanticError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Capturing semantic error", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 22
 testRunner.Given("there is a Gherkin file as", "\tFeature: Semantic error\r\n\r\n\tScenario: Table cell count mismatch\r\n\t\tGiven a table" +
                    "\r\n\t\t\t| h1 | h2 |\r\n\t\t\t| c1 | c2 | c3 |", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.When("the file is parsed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "line",
                        "error"});
            table2.AddRow(new string[] {
                        "6",
                        "Number of cells in the row does not match the number of cells in the header"});
#line 32
 testRunner.Then("the following errors are provided", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Capturing delayed semantic error")]
        public virtual void CapturingDelayedSemanticError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Capturing delayed semantic error", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 37
 testRunner.Given("there is a Gherkin file as", "\tFeature: Delayed semantic error\r\n\r\n\tScenario Outline: Scenario outline without e" +
                    "xamples\r\n\t\tGiven something\r\n\r\n\tScenario: proper scenario\r\n\t\tGiven something", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 47
 testRunner.When("the file is parsed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "line",
                        "error"});
            table3.AddRow(new string[] {
                        "3",
                        "There are no examples defined for the scenario outline"});
#line 48
 testRunner.Then("the following errors are provided", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Restart parsing after a syntax error")]
        public virtual void RestartParsingAfterASyntaxError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Restart parsing after a syntax error", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 54
 testRunner.Given("there is a Gherkin file as", "\tFeature: misspelled step keyword\r\n\r\n\tScenario: misspelled step keyword 1\r\n\t\tGive" +
                    "n something\r\n\t\tWhenX something is misspelled\r\n\t\tThenX something is also misspell" +
                    "ed", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 63
 testRunner.When("the file is parsed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "line",
                        "error"});
            table4.AddRow(new string[] {
                        "5",
                        "Parsing error near \'WhenX"});
            table4.AddRow(new string[] {
                        "6",
                        "Parsing error near \'ThenX"});
#line 64
 testRunner.Then("the following errors are provided", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Restart parsing after a semantic error")]
        public virtual void RestartParsingAfterASemanticError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Restart parsing after a semantic error", ((string[])(null)));
#line 69
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 70
 testRunner.Given("there is a Gherkin file as", "\tFeature: Table cell count mismatch\r\n\r\n\tScenario: Table cell count mismatch\r\n\t\tGi" +
                    "ven a table\r\n\t\t\t| h1 | h2 |\r\n\t\t\t| c1 | c2 | c3 |\r\n\t\tWhenX something is misspelle" +
                    "d", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 80
 testRunner.When("the file is parsed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "line",
                        "error"});
            table5.AddRow(new string[] {
                        "6",
                        "Number of cells in the row does not match the number of cells in the header"});
            table5.AddRow(new string[] {
                        "7",
                        "Parsing error near \'WhenX"});
#line 81
 testRunner.Then("the following errors are provided", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Do not restart parsing after a delayed semantic error")]
        public virtual void DoNotRestartParsingAfterADelayedSemanticError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Do not restart parsing after a delayed semantic error", ((string[])(null)));
#line 86
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 87
 testRunner.Given("there is a Gherkin file as", "\tFeature: Table cell count mismatch\r\n\r\n\tScenario Outline: Scenario outline withou" +
                    "t examples\r\n\t\tGiven something\r\n\r\n\tScenario Outline: Other scenario outline witho" +
                    "ut examples\r\n\t\tGiven something\r\n\r\n\tScenario: proper scenario\r\n\t\tGiven something", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 100
 testRunner.When("the file is parsed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "line",
                        "error"});
            table6.AddRow(new string[] {
                        "3",
                        "There are no examples defined for the scenario outline"});
#line 101
 testRunner.Then("the following errors are provided", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
