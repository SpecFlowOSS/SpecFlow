// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.7.1.0
//      SpecFlow Generator Version:1.7.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace TechTalk.SpecFlow.IntegrationTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.7.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Parser smoke tests")]
    public partial class ParserSmokeTestsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ParserSmokeTests.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Parser smoke tests", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void TestFilesCanBeParsed(string testFile, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test files can be parsed", exampleTags);
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.When(string.Format("the test file \'{0}.feature\' is parsed", testFile));
#line 5
 testRunner.Then("no parsing error is reported");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test files can be parsed")]
        public virtual void TestFilesCanBeParsed_Asterisks()
        {
            this.TestFilesCanBeParsed("asterisks", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test files can be parsed")]
        public virtual void TestFilesCanBeParsed_Background()
        {
            this.TestFilesCanBeParsed("background", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test files can be parsed")]
        public virtual void TestFilesCanBeParsed_Background_Withtitle()
        {
            this.TestFilesCanBeParsed("background_withtitle", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test files can be parsed")]
        public virtual void TestFilesCanBeParsed_But()
        {
            this.TestFilesCanBeParsed("but", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test files can be parsed")]
        public virtual void TestFilesCanBeParsed_Comments()
        {
            this.TestFilesCanBeParsed("comments", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test files can be parsed")]
        public virtual void TestFilesCanBeParsed_Dutch()
        {
            this.TestFilesCanBeParsed("dutch", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test files can be parsed")]
        public virtual void TestFilesCanBeParsed_Featureheader()
        {
            this.TestFilesCanBeParsed("featureheader", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test files can be parsed")]
        public virtual void TestFilesCanBeParsed_French()
        {
            this.TestFilesCanBeParsed("french", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test files can be parsed")]
        public virtual void TestFilesCanBeParsed_Full()
        {
            this.TestFilesCanBeParsed("full", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test files can be parsed")]
        public virtual void TestFilesCanBeParsed_German()
        {
            this.TestFilesCanBeParsed("german", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test files can be parsed")]
        public virtual void TestFilesCanBeParsed_Givenwhenthenduplication()
        {
            this.TestFilesCanBeParsed("givenwhenthenduplication", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test files can be parsed")]
        public virtual void TestFilesCanBeParsed_Hungarian()
        {
            this.TestFilesCanBeParsed("hungarian", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test files can be parsed")]
        public virtual void TestFilesCanBeParsed_Mixedgivenwhenthen()
        {
            this.TestFilesCanBeParsed("mixedgivenwhenthen", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test files can be parsed")]
        public virtual void TestFilesCanBeParsed_Multilineargument()
        {
            this.TestFilesCanBeParsed("multilineargument", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test files can be parsed")]
        public virtual void TestFilesCanBeParsed_Multilinetitle()
        {
            this.TestFilesCanBeParsed("multilinetitle", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test files can be parsed")]
        public virtual void TestFilesCanBeParsed_Scenariooutline()
        {
            this.TestFilesCanBeParsed("scenariooutline", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test files can be parsed")]
        public virtual void TestFilesCanBeParsed_Simple()
        {
            this.TestFilesCanBeParsed("simple", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test files can be parsed")]
        public virtual void TestFilesCanBeParsed_Swedish()
        {
            this.TestFilesCanBeParsed("swedish", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test files can be parsed")]
        public virtual void TestFilesCanBeParsed_Tableargument()
        {
            this.TestFilesCanBeParsed("tableargument", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test files can be parsed")]
        public virtual void TestFilesCanBeParsed_Taggedexamples()
        {
            this.TestFilesCanBeParsed("taggedexamples", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test files can be parsed")]
        public virtual void TestFilesCanBeParsed_Tags()
        {
            this.TestFilesCanBeParsed("tags", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test files can be parsed")]
        public virtual void TestFilesCanBeParsed_Whitespaces()
        {
            this.TestFilesCanBeParsed("whitespaces", ((string[])(null)));
        }
        
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore(string testFile, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parsed test files produce the same result as before", exampleTags);
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
 testRunner.When(string.Format("the test file \'{0}.feature\' is parsed", testFile));
#line 37
 testRunner.Then(string.Format("the parsed result is the same as \'{0}.feature.xml\'", testFile));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsed test files produce the same result as before")]
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore_Asterisks()
        {
            this.ParsedTestFilesProduceTheSameResultAsBefore("asterisks", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsed test files produce the same result as before")]
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore_Background()
        {
            this.ParsedTestFilesProduceTheSameResultAsBefore("background", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsed test files produce the same result as before")]
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore_Background_Withtitle()
        {
            this.ParsedTestFilesProduceTheSameResultAsBefore("background_withtitle", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsed test files produce the same result as before")]
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore_But()
        {
            this.ParsedTestFilesProduceTheSameResultAsBefore("but", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsed test files produce the same result as before")]
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore_Comments()
        {
            this.ParsedTestFilesProduceTheSameResultAsBefore("comments", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsed test files produce the same result as before")]
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore_Dutch()
        {
            this.ParsedTestFilesProduceTheSameResultAsBefore("dutch", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsed test files produce the same result as before")]
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore_Featureheader()
        {
            this.ParsedTestFilesProduceTheSameResultAsBefore("featureheader", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsed test files produce the same result as before")]
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore_French()
        {
            this.ParsedTestFilesProduceTheSameResultAsBefore("french", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsed test files produce the same result as before")]
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore_Full()
        {
            this.ParsedTestFilesProduceTheSameResultAsBefore("full", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsed test files produce the same result as before")]
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore_German()
        {
            this.ParsedTestFilesProduceTheSameResultAsBefore("german", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsed test files produce the same result as before")]
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore_Givenwhenthenduplication()
        {
            this.ParsedTestFilesProduceTheSameResultAsBefore("givenwhenthenduplication", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsed test files produce the same result as before")]
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore_Hungarian()
        {
            this.ParsedTestFilesProduceTheSameResultAsBefore("hungarian", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsed test files produce the same result as before")]
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore_Mixedgivenwhenthen()
        {
            this.ParsedTestFilesProduceTheSameResultAsBefore("mixedgivenwhenthen", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsed test files produce the same result as before")]
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore_Multilineargument()
        {
            this.ParsedTestFilesProduceTheSameResultAsBefore("multilineargument", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsed test files produce the same result as before")]
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore_Multilinetitle()
        {
            this.ParsedTestFilesProduceTheSameResultAsBefore("multilinetitle", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsed test files produce the same result as before")]
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore_Scenariooutline()
        {
            this.ParsedTestFilesProduceTheSameResultAsBefore("scenariooutline", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsed test files produce the same result as before")]
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore_Simple()
        {
            this.ParsedTestFilesProduceTheSameResultAsBefore("simple", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsed test files produce the same result as before")]
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore_Swedish()
        {
            this.ParsedTestFilesProduceTheSameResultAsBefore("swedish", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsed test files produce the same result as before")]
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore_Tableargument()
        {
            this.ParsedTestFilesProduceTheSameResultAsBefore("tableargument", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsed test files produce the same result as before")]
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore_Taggedexamples()
        {
            this.ParsedTestFilesProduceTheSameResultAsBefore("taggedexamples", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsed test files produce the same result as before")]
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore_Tags()
        {
            this.ParsedTestFilesProduceTheSameResultAsBefore("tags", ((string[])(null)));
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parsed test files produce the same result as before")]
        public virtual void ParsedTestFilesProduceTheSameResultAsBefore_Whitespaces()
        {
            this.ParsedTestFilesProduceTheSameResultAsBefore("whitespaces", ((string[])(null)));
        }
    }
}
#endregion
